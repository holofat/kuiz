// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	quizzes "kuiz/business/quizzes"

	mock "github.com/stretchr/testify/mock"
)

// QuizRepoInterface is an autogenerated mock type for the QuizRepoInterface type
type QuizRepoInterface struct {
	mock.Mock
}

// CreateQuiz provides a mock function with given fields: domain, ctx
func (_m *QuizRepoInterface) CreateQuiz(domain quizzes.Domain, ctx context.Context) (quizzes.Domain, error) {
	ret := _m.Called(domain, ctx)

	var r0 quizzes.Domain
	if rf, ok := ret.Get(0).(func(quizzes.Domain, context.Context) quizzes.Domain); ok {
		r0 = rf(domain, ctx)
	} else {
		r0 = ret.Get(0).(quizzes.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(quizzes.Domain, context.Context) error); ok {
		r1 = rf(domain, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteQuiz provides a mock function with given fields: id, currentUserId, domain, ctx
func (_m *QuizRepoInterface) DeleteQuiz(id string, currentUserId uint, domain quizzes.Domain, ctx context.Context) (quizzes.Domain, error) {
	ret := _m.Called(id, currentUserId, domain, ctx)

	var r0 quizzes.Domain
	if rf, ok := ret.Get(0).(func(string, uint, quizzes.Domain, context.Context) quizzes.Domain); ok {
		r0 = rf(id, currentUserId, domain, ctx)
	} else {
		r0 = ret.Get(0).(quizzes.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint, quizzes.Domain, context.Context) error); ok {
		r1 = rf(id, currentUserId, domain, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuiz provides a mock function with given fields: id, ctx
func (_m *QuizRepoInterface) GetQuiz(id string, ctx context.Context) (quizzes.Domain, error) {
	ret := _m.Called(id, ctx)

	var r0 quizzes.Domain
	if rf, ok := ret.Get(0).(func(string, context.Context) quizzes.Domain); ok {
		r0 = rf(id, ctx)
	} else {
		r0 = ret.Get(0).(quizzes.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, context.Context) error); ok {
		r1 = rf(id, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

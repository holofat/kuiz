// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	questions "kuiz/business/questions"

	mock "github.com/stretchr/testify/mock"
)

// QuestionRepoInterface is an autogenerated mock type for the QuestionRepoInterface type
type QuestionRepoInterface struct {
	mock.Mock
}

// CreateQuestion provides a mock function with given fields: domain, ctx
func (_m *QuestionRepoInterface) CreateQuestion(domain questions.Question, ctx context.Context) (questions.Question, error) {
	ret := _m.Called(domain, ctx)

	var r0 questions.Question
	if rf, ok := ret.Get(0).(func(questions.Question, context.Context) questions.Question); ok {
		r0 = rf(domain, ctx)
	} else {
		r0 = ret.Get(0).(questions.Question)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(questions.Question, context.Context) error); ok {
		r1 = rf(domain, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteQuestion provides a mock function with given fields: id, ctx
func (_m *QuestionRepoInterface) DeleteQuestion(id string, ctx context.Context) error {
	ret := _m.Called(id, ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, context.Context) error); ok {
		r0 = rf(id, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetQuestion provides a mock function with given fields: id, ctx
func (_m *QuestionRepoInterface) GetQuestion(id string, ctx context.Context) ([]questions.Question, error) {
	ret := _m.Called(id, ctx)

	var r0 []questions.Question
	if rf, ok := ret.Get(0).(func(string, context.Context) []questions.Question); ok {
		r0 = rf(id, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]questions.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, context.Context) error); ok {
		r1 = rf(id, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
